toc:
  
  - name: wellio
    description: |
      <head>
        <style>
        h2{
          color:black;
        }
          code.black{
            background-color: #295377;
            
            overflow: hidden;
            padding: 0.5rem;
            color: white;
            font: 0.8rem Inconsolata, monospace;

        
            width:100%;          
          }
        </style>
      </head>

      ### Wellio.js is a JavaScript library for converting a LAS 2.0 well log file into a wellio style JSON.

      #### Reason for Existing:
      Why would you want to do this? You can think of both LAS 2.0 and JSON as file formats that hold strings. 
      The difference is <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> is a very common data format widely used across a variety of computer languages. It is used extensively on the web to hold data. 
      LAS 2.0 is not. LAS 2.0 is specifically for well logs. <a href="https://en.wikipedia.org/wiki/Well_logging">Well logs</a> are measurements along a well bore that meausure changes in subsurface properties.
      By converting LAS 2.0 to JSON, we get data into a format that is much easier to work with on the web. 
      Wellio's companion library  <a href="https://github.com/JustinGOSSES/wellioviz">wellioviz</a> takes the JSON that results from Wellio and visualizes it by leveraging <a href="https://d3js.org/">D3.js</a> v5. 
      However, you could visualize the same wellio JSON with a wide variety of other visualization tools too, because nearly all of them can consume JSON.
  
  - name: Link to wellio GitHub repository
    description: |
      <a href="https://github.com/JustinGOSSES/wellio.js">https://github.com/JustinGOSSES/wellio.js</a>

  - name: Usage
    description: |
      In the wellio documentation, we have split out <b>"How to Install & Get Ready to Use"</b> and <b>"How to Use Once Installed"</b>, because installation varies depending on whether wellio is being used as front-end JavaScript code on a website, in an Observable JavaScript Notebook, or server-side via a command line or node.js script. 
      
      Once installed and ready to use, however, how to use wellio is identical no matter where used.

  - name: How to Install
    description: |
      Wellio.js is packaged as <a href="https://en.wikipedia.org/wiki/Npm_(software)">npm</a> module as seen <a href="https://www.npmjs.com/package/wellio">here</a>. 
      The code that you pull when you install the npm module is found in the `dist` folder of the <a href="https://github.com/JustinGOSSES/wellio.js">wellio repository</a> on GitHub.
      
      It can be run from the back-end or front-end. Frontend being from a webpage running HTML, CSS, and JavaScript. Backend meaning on a server or in your terminal. 
      Most people will probably be interested in running it on the frontend, but we'll start by explaining how to run it on the backend or server side as that's a bit easier to explain.

      ### Server-side
      1. If you haven't already, <a href="https://nodejs.dev/learn/how-to-install-nodejs">install node.js</a> and npm. Node.js is server-side JavaScript. NPM is the package manager for node.js. 
      When you install Node.js, you should also get npm as described <a href="https://www.npmjs.com/get-npm">here</a>.
      2. Navigate in your terminal to where you want to work. 
      3. To install wellio run: 
      
      <code class="black"> npm install wellio </code>

      4. Move a LAS 2.0 well log file into the same directory if not already there.
      5. Enter node, but typing in the termianl 
      
      <code class="black"> node</code>

      6. Once in command line node environment, to start with wellio, you'll have to run 

      <code class="black"> wellio = require('wellio') </code>

      7. At this point we can now jump to how to use wellio as described in the <b> HOW TO USE ONCE INSTALLED </b> section.

      ### Observable Notebooks
      The process for installing wellio in an Observable notebook is very easy as it is a npm module. It is literally as easy as:
       
      <code class="black">  wellio = require(wellio) </code>
      
      As seen in the example notebook <a href="https://observablehq.com/@justingosses/a-notebook-using-wellio-js-wellioviz-js-for-quick-looks-of-la">here</a>.
      Once wellio is imported using require, you can call any wellio function like:
      
      <code class="black">   well_as_wellio_style_json_in_memory = wellio.las2json(las_file_read_in_as_string) </code>

      ### Front-end side
      Due to wellio being a npm module, we'll need to use <a href="">require</a> to pull it into front-end code. Require can be confusing and I've not found their documentation to be super clear. 
      That's less a problem of documentation as it is that there's multiple ways for npm modules to work and therefore differences in how require can end up working, which gets confusing. 
      
      I'll try to explain one way to bring in wellio that is used to make the demo page that lives as a github pages page in the main wellio repository. 

      The demo page that lets you try out wellio.js is <a href="https://justingosses.github.io/wellio.js/">here</a>.

      The code for that demo page is at the top level of the wellio repository as seen <a href="https://github.com/JustinGOSSES/wellio.js/blob/master/index.html">here</a>. Go have a look. 

      If you look at code that makes up the index.html page that builds the demo page, you'll see in the header section that multiple CSS and JS libraries are pulled into index.html. 
      
      #### There 3 we care about the most for explaining how to pull wellio into the front-end demo page are:

      ##### 1. <code class="black"> `<script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>` </code>

      This imports the requirejs JavaScript library that we'll use to import the wellio npm module into our code such that we can call it.

      ##### 2. <code class="black"> `<script src="./dist/index.js"></script>` </code>

      This pulls in the JavaScript at that location. It is a relative location, meaning relative to the index.html page that calls it and makes up the demo. It is the same code that makes up wellio and is sent to the npm (node package manager). 
      
      If you're not working with the demo page that is in the same folder location as the main wellio code, there's a couple other ways to go. If you're familar with node modules, you probably already know how to work with them and aren't reading this demo. 
      If you're confused, you can simply use an absolute url rather than a relative one. 
      For example, <a href="https://raw.githubusercontent.com/JustinGOSSES/wellio.js/master/dist/index.js">  `<script src="https://raw.githubusercontent.com/JustinGOSSES/wellio.js/master/dist/index.js"></script>` </a> will pull in the code you need from the current master branch of wellio.
    
      ##### 3. <code class="black"> `<script src="./js/main.js"></script>` </code>
      Main.js is the JavaScript file that pulls in wellio and uses it in the demo page. If you look at the <a href="">code</a>, you'll see starting on line 13...
      
      <code class="black"> wellio = require(['./dist/index.js'],function(wellio_obj){console.log("wellio test",wellio) wellio = wellio_obj}) </code>

      This is where `require` pulls in wellio and makes a wellio object to call all the wellio functions as described in the <b> "How to Use Once Installed"</b> section.

      #### Other files that help make the demo page worth mentioning are...
      - CSS files are in the CSS folder. 
      - Several example well logs are in the ASSETS folder.
      - <a href="https://github.com/agile-geoscience/g3">G3.js</a> is used to draw a plot of the well log curves. It leverages <a href="https://github.com/d3">d3.js</a> but version 2. There is some functionality that makes it much easier to draw vertical curves in d3.js v5, which led to the creation of wellioviz after an initial effort to develop on G3. 
      - <a href="https://github.com/vkiryukhin/vkBeautify">VKbeautify.js</a> is a script for adding spaces and such to JSON to make them prettier when printed.
      - <a href="https://github.com/google/code-prettify">run_prettify.js</a> does something similar but is focused on making it print nicely into HTML DOM elements.
  
  - name: How to Use Once Installed
    description: |
      No matter how you use wellio, you'll eventually get to the point where you'll start using it in your code by bringin it in via require, like this:
      
      <code class="black">wellio = require('wellio') </code>

      Now we have wellio installed and imported, so it is ready for use. We can load a well log saved as a .las file with:
      
      <code class="black">file_loaded_as_string = wellio.loadLAS("path_to_file")</code>
      
      We can convert that string into wellio style JSON in memory with:
      
      <code class="black">  wellio_style_json = wellio.las2json(file_loaded_as_string)</code>
      
      <b>We can now use the wellio_style_json object that is in memory! Getting to this point is the main reason for wellio.</b>
      
      
      We can manipulate it with other JavaScript code or use <a href="https://github.com/JustinGOSSES/wellioviz">wellioviz</a> to visualize it. 
      The wellioviz <a href="https://github.com/JustinGOSSES/wellioviz">README</a> has several links to various tutorials and demos for how to use wellioviz.
      
      ### Other Things You Might Want to Do with Wellio

      #### Saving the JSON as a file

      We can also save it to as a JSON file to our local computer, which follows the commands below.
      You'll have to stringify it first and then write it to a file. In this case, the resulting JSON file is named "UWI_of_Well.json".s

      <code class="black"> well_json_string = JSON.stringify(well_json) </code>

      <code class="black"> fs.writeFile("UWI_of_Well.json", well_json_string, 'utf8', function (err) {console.log("error")}) </code>

      #### The `help` and `returnThing` functions

      These are mostly in wellio for easy ways to test if it was installed and imported successfully. 
      They don't require any inputs to work. They can simply be called. 

      <code class="black"> wellio.help() </code>

      <code class="black"> wellio.returnThing("This is a test string that should be returned exactly as shown") </code>

      #### Getting specific pieces of information out of the wellio-style JSON

      Although getting information out of the wellio-style JSON is as straight forward as navigating a python dict, there are a few helper functions built-in.
      Clicking on each will bring you to the documenation for that function.

      - <a href="#CurveNames">`wellio.CurveNames()`</a>  will return all the curve names in a wellio-style JSON.
      - <a href="#VER_block">`wellio.VER_block()`</a>  will return version information that was in the original LAS file now in the wellio-style JSON.
      - <a href="#UWI">`wellio.UWI()`</a>  wellio.UWI will return the UWI if it exists. If you use this, wrap it in a function that fails as you intend it to.
      - <a href="#getCurve">`wellio.getCurve()`</a>  will return all the curve data for a given curve name in a wellio-style JSON.


      #### Working with well logs in JSONs other than wellio-style JSON

      These two functions are for converting Lasio-style JSON to wellio-style JSON. They are defined in the "functions section". 
      Clicking on them will take you directly to their documentation. 
      Why they exist is explained in the section directly below.
    
      
      <a href="#read_lasio_json_file">`wellio.read_lasio_json_file`</a> 
      
      and 
      
      <a href="#lasio_obj_2_wellio_obj">`wellio.lasio_obj_2_wellio_obj`</a>. 
      
      

  - name: Wellio-style JSON vs Others
    description: |
      As mentioned above in the upper most section, JSON is a format for storing data. It is based on keys and values and can store a huge variety of different types of data and informaion.

      As such, it shouldn't be surprising that there is more than one way to store well log data that was originally in LAS 2.0 file format in JSON format. 
      As of writing this, there are 3 that the author knows about. 
      - wellio-style JSON
      - <a href="https://lasio.readthedocs.io/en/latest/">lasio-style</a> JSON
      - <a href="https://jsonwelllogformat.org/">json-style</a> JSON

      #### JSON-style JSON
      If you're confused about what's a json-style JSON, that's okay. I'll try to explain. 
      Another group, not involved with wellio, made an attempt at a standardized way to store well log data in JSON. They named it "JSON Well Log Format". 
      This causes confusion as you start talking about JSON JSON and whether wellio JSON is compliant with JSON JSON. 

      At the time of writing, there are not any functions to convert between the json-style JSON and wellio-style JSON. 
      However, that could be added in the future.

      #### Lasio-style JSON
      To quote from their docs, <i>"lasio is a Python 3 package to read and write Log ASCII Standard (LAS) files, 
      used for borehole data such as geophysical, geological, or petrophysical logs. It’s compatible with versions 1.2 and 2.0 of the LAS file specification,
       published by the Canadian Well Logging Society. In principle it is designed to read as many types of LAS files as possible, including ones containing
       s common errors or non-compliant formatting."</i> 

      Lasio is the most common way to read well logs in Python. 
      Sometimes it is used directly and other times people use <a href="https://github.com/agile-geoscience/welly">welly</a>, 
      which wraps Lasio and provides a Pandas-like interface. 
      Lasio has the ability to export data loaded from a LAS 2.0 well log file into JSON format and save it as a JSON file. 
      
      <b>There are two functions in wellio for converting these lasio-style JSON files into wellio-style JSON.</b>

      A sequence of using them to load a lasio-style JSON file and convert it into wellio-style JSON is below:

        <code class="black"> let wellio = require('wellio') </code>

        <code class="black"> let lasio_json_str = wellio.read_lasio_json_file('lasio.json');</code>

        <code class="black"> let lasio_obj = JSON.parse(lasio_json_str);</code>

        <code class="black"> let wellio_obj = wellio.lasio_obj_2_wellio_obj(lasio_obj);</code>
         
        
      #### What a Wellio-Style JSON Looks Like:

      To give you an idea what the wellio-style JSON structure is like, here's a blank well log in the wellio-style JSON format. 
      
      ``` wellio_style_json = {
            "VERSION INFORMATION":{
              "VERS":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""},
              "WRAP":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""}
            }
            ,
            "WELL INFORMATION BLOCK":{
                "GENERATED":"",
                "MNEM_0":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""},
                "MNEM_1":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""},
                "MNEM_2":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""}
              }
            ,
            "CURVE INFORMATION BLOCK":{
                "MNEM_0":{"MNEM":"","UNIT":"","ERCB CURVE CODE":"","CURVE DESCRIPTION 1":"","CURVE DESCRIPTION 2":""}, 
                "MNEM_0":{"MNEM":"","UNIT":"","ERCB CURVE CODE":"","CURVE DESCRIPTION 1":"","CURVE DESCRIPTION 2":""},
              }		
            ,
            "PARAMETER INFORMATION":{
                "MNEM_0":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""}, 
                "MNEM_1":{"MNEM":"","UNIT":"","DATA":"","DESCRIPTION OF MNEMONIC 1":"","DESCRIPTION OF MNEMONIC 2":""},
              }
            ,
            "CURVES":{
                "Curve_NAME_ONE" :[1,2,3,4,5,6,7,8,9,10,11],
                "Curve_NAME_ONE" :[1,2,3,4,5,6,7,8,9,10,11],
              }
          }
      ```



  - name: How to Edit Documentation
    description: |
      - Make changes to documentation in the index.js file. 
      - Alternatively, make change to the documentation.yml file in the docs folder.
      - Go to the top level folder. 
      - Assuming documentation.js is alredy installed, run: <code class="black">documentation build -c docs/documentation.yml dist/* -f html -o docs </code>
      - Now CD to docs folder. 
      - Run <code class="black">python3 -m http.server</code>
      - You should be able to go to your browser at http://0.0.0.0:8000/ and see the docs. 

  - name: Tests
    description: |
      There are test functions used for testing wellio used in the <a href="https://github.com/JustinGOSSES/wellio.js/tree/master/dist/test">`dist/test/`</a> folder. 

  - name: Functions
