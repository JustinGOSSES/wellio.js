toc:
  - name: wellio
    description: |
      ### Wellio.js is a JavaScript library for converting a LAS 2.0 well log file into a wellio style JSON.
      Why would you want to do this? You can think of both LAS 2.0 and JSON as file formats that hold strings. 
      The difference is <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> is a very common data format widely used across a variety of computer languages. It is used extensively on the web to hold data. 
      LAS 2.0 is not. LAS 2.0 is specifically for well logs. <a href="https://en.wikipedia.org/wiki/Well_logging">Well logs</a> are measurements along a well bore that meausure changes in subsurface properties.
      By converting LAS 2.0 to JSON, we get data into a format that is much easier to work with on the web. 
      Wellio's companion library  <a href="https://github.com/JustinGOSSES/wellioviz">wellioviz</a> takes the JSON that results from Wellio and visualizes it by leveraging <a href="https://d3js.org/">D3.js</a> v5. 
      However, you could visualize the same wellio JSON with a wide variety of other visualization tools too, because nearly all of them can consume JSON.

  - name: How to Use
    description: |
      Wellio.js is packaged as <a href="https://en.wikipedia.org/wiki/Npm_(software)">npm</a> module as seen <a href="https://www.npmjs.com/package/wellio">here</a>. 
      The code that you pull when you install the npm module is found in the `dist` folder of the <a href="https://github.com/JustinGOSSES/wellio.js">wellio repository</a> on GitHub.
      
      It can be run from the back-end or front-end. Frontend being from a webpage running HTML, CSS, and JavaScript. Backend meaning on a server or in your terminal. 
      Most people will probably be interested in running it on the frontend, but we'll start by explaining how to run it on the backend or server side as that's a bit easier to explain.

      ### Server-side
      1. If you haven't already, <a href="https://nodejs.dev/learn/how-to-install-nodejs">install node.js</a> and npm. Node.js is server-side JavaScript. NPM is the package manager for node.js. 
      When you install Node.js, you should also get npm as described <a href="https://www.npmjs.com/get-npm">here</a>.
      2. Navigate in your terminal to where you want to work. 
      3. To install wellio run: 
      > ```npm install wellio```

     
      4. Move a LAS 2.0 well log file into the same directory if not already there.
      5. Enter node, but typing in the termianl 
      > `node`
      6. Once in command line node environment, to start with wellio, you'll have to run 
      > `wellio = require('wellio')` . 
      7. You should see something print out like:
      > { read_lasio_json_file: [Function: read_lasio_json_file], 
      > lasio_obj_2_wellio_obj: [Function: lasio_obj_2_wellio_obj],
      > returnThing: [Function: returnThing],
      > loadLAS: [Function: loadLAS],
      > las2json: [Function: las2json],
      > CurveNames: [Function: CurveNames],
      > VER_block: [Function: VER_block],
      > UWI: [Function: UWI],
      > getCurve: [Function: getCurve] }
      8. Now we have wellio installed and imported, so it is ready for use. We can load a well log saved as a .las file with:
        > file_loaded_as_string = wellio.loadLAS("path_to_file")
      9. We can convert that string into wellio style JSON in memory with:
        > wellio_style_json = wellio.las2json(file_loaded_as_string)
      10. We can now use the wellio_style_json object that is in memory. We can manipulate it with other JavaScript code or use wellioviz to visualize it. We can also save it to as a JSON file to our local computer, which follows the commands below.
        You'll have to stringify it first and then write it to a file.
        > `well_json_string = JSON.stringify(well_json)` 

        > `fs.writeFile("UWI_of_Well.json", well_json_string, 'utf8', function (err) {console.log("error")})`


      ### Observable Notebooks
      The process for calling wellio in an Observable notebook is very easy as it is a npm module. It is literally as easy as:
      > `wellio = require(wellio)`.
      
      As seen in the example notebook <a href="https://observablehq.com/@justingosses/a-notebook-using-wellio-js-wellioviz-js-for-quick-looks-of-la">here</a>.
      Once wellio is imported using require, you can call any wellio function like:
       > `well_as_wellio_style_json_in_memory = wellio.las2json(las_file_read_in_as_string)

      ### Front-end side
      This repo contains various pieces of code for the github pages demo page. In addition to the the wellio.js JavaScript file in the js folder, there is the index.html, which is the main html page for <a href="https://justingosses.github.io/wellio.js/">the github pages demo</a>. 

      CSS files are in the CSS folder. 

      Several example well logs are in the ASSETS folder.


      <a href="https://github.com/agile-geoscience/g3">G3.js</a> is used to draw a plot of the well log curves. It leverages <a href="https://github.com/d3">d3.js</a>.
      <a href="https://github.com/vkiryukhin/vkBeautify">VKbeautify.js</a> is a script for adding spaces and such to JSON to make them prettier when printed.
      <a href="https://github.com/google/code-prettify">run_prettify.js</a> does something similar but is focused on making it print nicely into HTML DOM elements. 


  - name: How to Edit Documentation
    description: |
      - Make changes to documentation in the index.js file. 
      - Alternatively, make change to the documentation.yml file in the docs folder.
      - Go to the top level folder. 
      - (assuming documentation.js is alredy installed) Run `documentation build -c docs/documentation.yml dist/* -f html -o docs'
      - Now CD to docs folder. 
      - Run `python3 -m http.server`. You should be able to go to your browser at http://0.0.0.0:8000/ and see the docs. 
      - Once you push the repo to github, the docs should be at the top level of the githu pages page plus /docs/index.html

  - name: Functions
